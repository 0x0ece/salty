#![no_std]
#![no_main]

extern crate panic_semihosting;
use cortex_m_rt::entry;
use cortex_m_semihosting::{debug, hprintln};

fn test_empty_hash() {
    let empty_hash = salty::Sha512::new().updated(&[]).finalize();
    #[rustfmt::skip]
    let expected: [u8; 64] = [
        0xcf, 0x83, 0xe1, 0x35, 0x7e, 0xef, 0xb8, 0xbd,
        0xf1, 0x54, 0x28, 0x50, 0xd6, 0x6d, 0x80, 0x07,
        0xd6, 0x20, 0xe4, 0x05, 0x0b, 0x57, 0x15, 0xdc,
        0x83, 0xf4, 0xa9, 0x21, 0xd3, 0x6c, 0xe9, 0xce,
        0x47, 0xd0, 0xd1, 0x3c, 0x5d, 0x85, 0xf2, 0xb0,
        0xff, 0x83, 0x18, 0xd2, 0x87, 0x7e, 0xec, 0x2f,
        0x63, 0xb9, 0x31, 0xbd, 0x47, 0x41, 0x7a, 0x81,
        0xa5, 0x38, 0x32, 0x7a, 0xf9, 0x27, 0xda, 0x3e,
    ];
    assert_eq!(empty_hash[..16], expected[..16]);
}

fn test_signature() {
    #![allow(non_snake_case)]

    let seed: [u8; 32] = [
        0x35, 0xb3, 0x07, 0x76, 0x17, 0x9a, 0x78, 0x58,
        0x34, 0xf0, 0x4c, 0x82, 0x88, 0x59, 0x5d, 0xf4,
        0xac, 0xa1, 0x0b, 0x33, 0xaa, 0x12, 0x10, 0xad,
        0xec, 0x3e, 0x82, 0x47, 0x25, 0x3e, 0x6c, 0x65,
    ];

    let keypair = salty::Keypair::from(&seed);

    let data = "salty!".as_bytes();

    let R_expected = [
        0xec, 0x97, 0x27, 0x40, 0x07, 0xe7, 0x08, 0xc6,
        0xd1, 0xee, 0xd6, 0x01, 0x9f, 0x5d, 0x0f, 0xcb,
        0xe1, 0x8a, 0x67, 0x70, 0x8d, 0x17, 0x92, 0x4b,
        0x95, 0xdb, 0x7e, 0x35, 0xcc, 0xaa, 0x06, 0x3a,
    ];

    let S_expected = [
        0xb8, 0x64, 0x8c, 0x9b, 0xf5, 0x48, 0xb0, 0x09,
        0x90, 0x6f, 0xa1, 0x31, 0x09, 0x0f, 0xfe, 0x85,
        0xa1, 0x7e, 0x89, 0x99, 0xb8, 0xc4, 0x2c, 0x97,
        0x32, 0xf9, 0xa6, 0x44, 0x2a, 0x17, 0xbc, 0x09,
    ];

    // sign
    let signature = keypair.sign(&data);

    // check signature is as expected
    assert_eq!(signature.r.to_bytes(), R_expected);
    assert_eq!(signature.s.to_bytes(), S_expected);

    // verify signature
    let public_key = keypair.public;
    let verification = public_key.verify(&data, &signature);
    assert!(verification.is_ok());
}

#[entry]
fn main() -> ! {

    test_empty_hash();
    test_signature();

    hprintln!("Tests passed!").ok();

    debug::exit(debug::EXIT_SUCCESS);

    loop { continue; }

}
